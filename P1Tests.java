/*
 * Make sure junit-4.11.jar is in the same location as the files
 * 
 * In cmd, after cd (changing directory) to file locations:
 *     javac -cp .;junit-4.11.jar *.java
 *        to compile
 *     java -cp .;junit-4.11.jar FileName
 *        to run it
 * 
 * In DrJava, Interactions:
 * (note: DON'T put a ; after a line if you want to see its result)
 *     >P1Tests p = new P1Tests()
 *     >p.fractal_escape2_p1()
 * */

import org.junit.*;
import static org.junit.Assert.*;
import java.util.*;
import java.io.*;

public class P1Tests {
  public static void main(String args[]){
    org.junit.runner.JUnitCore.main("P1Tests");
  }
  
  
  public String readFile(String filename) {
    try {
      Scanner sc = new Scanner(new File(filename));
      StringBuilder s = new StringBuilder();
      while (sc.hasNextLine()){
        s.append(sc.nextLine()+"\n");
      }
      return s.toString();
    }
    catch (FileNotFoundException e){
     throw new AssertionError("can't read the missing file '"+filename+"'"); 
    }
  }
  
  public boolean ceq(Complex a, Complex b){
   return a.r==b.r && a.i==b.i; 
  }
  
  Complex r5 = new Complex (5,0);
  Complex r4 = new Complex (4,0);
  Complex r3 = new Complex (3,0);
  Complex r2 = new Complex (2,0);
  Complex r1 = new Complex (1,0);
  Complex z  = new Complex (0,0);
  
  Complex i1 = new Complex (0,1);
  Complex i2 = new Complex (0,2);
  Complex i3 = new Complex (0,3);
  Complex i4 = new Complex (0,4);
  Complex i5 = new Complex (0,5);
  
  Complex r3i4 = new Complex(3,4);
  Complex r10i2 = new Complex(10,2);
  Complex r2i10 = new Complex(2,10);
//  Complex ri = new Complex();
//  Complex ri = new Complex();
  
  
  final double EXACT = 0.0;
  @Test public void complex1 () {assertEquals(3, new Complex(3,5).r,EXACT);}
  @Test public void complex2 () {assertEquals(3, new Complex(5,3).i,EXACT);}
  @Test public void complex3 () {assertEquals(3, new Complex(5,3).i,EXACT);}
  
  @Test public void complex4 () {assertEquals(r5.r, Complex.add(new Complex(2,5),new Complex(3,7)).r,EXACT);}
  @Test public void complex5 () {assertEquals(r2i10.i, Complex.add(new Complex(2,3),new Complex(5,7)).i,EXACT);}
  @Test public void complex6 () {assertTrue(ceq(new Complex(11,13),Complex.add(new Complex(-10,-100),new Complex(21,113))));}
  
  @Test public void complex7 () {assertTrue(ceq(new Complex( 5, 0),Complex.sub(new Complex(12, 0),new Complex( 7, 0))));}
  @Test public void complex8 () {assertTrue(ceq(new Complex( 0, 7),Complex.sub(new Complex( 0,20),new Complex( 0,13))));}
  @Test public void complex9 () {assertTrue(ceq(new Complex( 2,-3),Complex.sub(new Complex( 8, 4),new Complex( 6, 7))));}
  
  @Test public void complex10() {assertTrue(ceq(new Complex(  84, 0),Complex.mul(new Complex(12, 0),new Complex( 7, 0))));}
  @Test public void complex11() {assertTrue(ceq(new Complex(-260, 0),Complex.mul(new Complex( 0,20),new Complex( 0,13))));}
  @Test public void complex12() {assertTrue(ceq(new Complex(  20,80),Complex.mul(new Complex( 8, 4),new Complex( 6, 7))));}
  
  @Test public void complex13() {assertEquals(5, Complex.abs(new Complex(5,0)),EXACT);}
  @Test public void complex14() {assertEquals(17.029386, Complex.abs(new Complex(11,13)),0.000001);}
  @Test public void complex15() {assertTrue(ceq(r5, r5.copy()));}
  
  Mandelbrot m1 = new Mandelbrot(new Complex(-2,-2),new Complex(2,2),5,5,20);
  int[][] e1 =
  {{  0,  0,  1,  0,  0 },
   {  0,  2, 20,  1,  0 },
   { 20, 20, 20,  2,  1 },
   {  0,  2, 20,  1,  0 },
   {  0,  0,  1,  0,  0 }};
  String s1 = "5 5 20\n-2.0 2.0 -2.0 2.0\n0.0 0.0\n\n\n  0  0  1  0  0\n  0  2 20  1  0\n 20 20 20  2  1\n  0  2 20  1  0\n  0  0  1  0  0\n";
  
  Mandelbrot m2 = new Mandelbrot(new Complex(-2,-2),new Complex(2,2),17,17,20);
  int[][] e2 =
  {{   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,},
   {   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1,   1,   0,   0,   0,   0,   0,},
   {   0,   0,   0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   0,   0,   0,},
   {   0,   0,   1,   1,   1,   2,   2,   2,   1,   1,   1,   1,   1,   1,   1,   0,   0,},
   {   0,   0,   1,   2,   2,   2,   3,   5,  20,   3,   1,   1,   1,   1,   1,   0,   0,},
   {   0,   1,   2,   2,   2,   3,   5,  20,  20,   4,   2,   1,   1,   1,   1,   1,   0,},
   {   0,   2,   2,   3,   4,   5,  20,  20,  20,  20,   4,   2,   1,   1,   1,   1,   0,},
   {   0,   3,   4,   8,  20,  12,  20,  20,  20,  20,   4,   2,   1,   1,   1,   1,   0,},
   {  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,   4,   2,   2,   1,   1,   1,   1,},
   {   0,   3,   4,   8,  20,  12,  20,  20,  20,  20,   4,   2,   1,   1,   1,   1,   0,},
   {   0,   2,   2,   3,   4,   5,  20,  20,  20,  20,   4,   2,   1,   1,   1,   1,   0,},
   {   0,   1,   2,   2,   2,   3,   5,  20,  20,   4,   2,   1,   1,   1,   1,   1,   0,},
   {   0,   0,   1,   2,   2,   2,   3,   5,  20,   3,   1,   1,   1,   1,   1,   0,   0,},
   {   0,   0,   1,   1,   1,   2,   2,   2,   1,   1,   1,   1,   1,   1,   1,   0,   0,},
   {   0,   0,   0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   0,   0,   0,},
   {   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1,   1,   0,   0,   0,   0,   0,},
   {   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0}};
  String s2 = "17 17 20\n-2.0 2.0 -2.0 2.0\n0.0 0.0\n\n\n  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  0  0  0  0  0  1  1  1  1  1  1  1  0  0  0  0  0\n  0  0  0  1  1  1  1  1  1  1  1  1  1  1  0  0  0\n  0  0  1  1  1  2  2  2  1  1  1  1  1  1  1  0  0\n  0  0  1  2  2  2  3  5 20  3  1  1  1  1  1  0  0\n  0  1  2  2  2  3  5 20 20  4  2  1  1  1  1  1  0\n  0  2  2  3  4  5 20 20 20 20  4  2  1  1  1  1  0\n  0  3  4  8 20 12 20 20 20 20  4  2  1  1  1  1  0\n 20 20 20 20 20 20 20 20 20 20  4  2  2  1  1  1  1\n  0  3  4  8 20 12 20 20 20 20  4  2  1  1  1  1  0\n  0  2  2  3  4  5 20 20 20 20  4  2  1  1  1  1  0\n  0  1  2  2  2  3  5 20 20  4  2  1  1  1  1  1  0\n  0  0  1  2  2  2  3  5 20  3  1  1  1  1  1  0  0\n  0  0  1  1  1  2  2  2  1  1  1  1  1  1  1  0  0\n  0  0  0  1  1  1  1  1  1  1  1  1  1  1  0  0  0\n  0  0  0  0  0  1  1  1  1  1  1  1  0  0  0  0  0\n  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0\n";
  
  Mandelbrot m3 = new Mandelbrot(new Complex(-2,-2),new Complex(0,2),33,33,20);
  int[][] e3 =
    { {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,},
      {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,},
      {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,},
      {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,},
      {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,},
      {   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,},
      {   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,},
      {   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   3,   3,   3,   4,   5,   4,   3,   3,},
      {   0,   0,   0,   0,   0,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   3,   3,   3,   3,   4,   4,   5,   7,  12,  19,  20,},
      {   0,   0,   0,   0,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   3,   3,   3,   3,   3,   3,   4,   4,   5,  12,  10,  20,  15,   8,},
      {   0,   0,   0,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   3,   3,   3,   3,   3,   4,   5,   5,   5,   6,   7,  20,  20,  20,  20,  20,},
      {   0,   0,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   3,   3,   3,   3,   4,   4,   4,   5,   8,  20,  19,  11,  20,  20,  20,  20,  20,  20,  20,},
      {   0,   0,   2,   2,   2,   2,   2,   2,   2,   2,   2,   3,   3,   4,   4,   4,   4,   4,   4,   5,   5,   8,  11,  17,  20,  20,  20,  20,  20,  20,  20,  20,  20,},
      {   0,   2,   2,   2,   2,   2,   3,   3,   3,   4,   4,   5,  13,   7,   6,   7,   7,   6,   6,   7,   7,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,},
      {   0,   2,   3,   3,   3,   3,   3,   4,   4,   4,   5,   6,   8,  20,  20,  20,  20,  20,  20,  10,  12,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,},
      {   0,   3,   3,   3,   3,   4,   5,   5,   6,   7,  10,  10,  18,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,},
      {  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,},
      {   0,   3,   3,   3,   3,   4,   5,   5,   6,   7,  10,  10,  18,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,},
      {   0,   2,   3,   3,   3,   3,   3,   4,   4,   4,   5,   6,   8,  20,  20,  20,  20,  20,  20,  10,  12,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,},
      {   0,   2,   2,   2,   2,   2,   3,   3,   3,   4,   4,   5,  13,   7,   6,   7,   7,   6,   6,   7,   7,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,},
      {   0,   0,   2,   2,   2,   2,   2,   2,   2,   2,   2,   3,   3,   4,   4,   4,   4,   4,   4,   5,   5,   8,  11,  17,  20,  20,  20,  20,  20,  20,  20,  20,  20,},
      {   0,   0,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   3,   3,   3,   3,   4,   4,   4,   5,   8,  20,  19,  11,  20,  20,  20,  20,  20,  20,  20,},
      {   0,   0,   0,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   3,   3,   3,   3,   3,   4,   5,   5,   5,   6,   7,  20,  20,  20,  20,  20,},
      {   0,   0,   0,   0,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   3,   3,   3,   3,   3,   3,   4,   4,   5,  12,  10,  20,  15,   8,},
      {   0,   0,   0,   0,   0,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   3,   3,   3,   3,   4,   4,   5,   7,  12,  19,  20,},
      {   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   3,   3,   3,   4,   5,   4,   3,   3,},
      {   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,},
      {   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,},
      {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,},
      {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,},
      {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,},
      {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,},
      {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1}};
  String s3 = "33 33 20\n-2.0 0.0 -2.0 2.0\n0.0 0.0\n\n\n  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  1  1  1\n  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1\n  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1\n  0  0  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1\n  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1\n  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  1\n  0  0  0  0  0  0  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  3  3  3  4  5  4  3  3\n  0  0  0  0  0  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  3  3  3  3  4  4  5  7 12 19 20\n  0  0  0  0  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  3  3  3  3  3  3  4  4  5 12 10 20 15  8\n  0  0  0  1  1  2  2  2  2  2  2  2  2  2  2  2  2  3  3  3  3  3  4  5  5  5  6  7 20 20 20 20 20\n  0  0  1  2  2  2  2  2  2  2  2  2  2  2  3  3  3  3  4  4  4  5  8 20 19 11 20 20 20 20 20 20 20\n  0  0  2  2  2  2  2  2  2  2  2  3  3  4  4  4  4  4  4  5  5  8 11 17 20 20 20 20 20 20 20 20 20\n  0  2  2  2  2  2  3  3  3  4  4  5 13  7  6  7  7  6  6  7  7 20 20 20 20 20 20 20 20 20 20 20 20\n  0  2  3  3  3  3  3  4  4  4  5  6  8 20 20 20 20 20 20 10 12 20 20 20 20 20 20 20 20 20 20 20 20\n  0  3  3  3  3  4  5  5  6  7 10 10 18 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20\n 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20\n  0  3  3  3  3  4  5  5  6  7 10 10 18 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20\n  0  2  3  3  3  3  3  4  4  4  5  6  8 20 20 20 20 20 20 10 12 20 20 20 20 20 20 20 20 20 20 20 20\n  0  2  2  2  2  2  3  3  3  4  4  5 13  7  6  7  7  6  6  7  7 20 20 20 20 20 20 20 20 20 20 20 20\n  0  0  2  2  2  2  2  2  2  2  2  3  3  4  4  4  4  4  4  5  5  8 11 17 20 20 20 20 20 20 20 20 20\n  0  0  1  2  2  2  2  2  2  2  2  2  2  2  3  3  3  3  4  4  4  5  8 20 19 11 20 20 20 20 20 20 20\n  0  0  0  1  1  2  2  2  2  2  2  2  2  2  2  2  2  3  3  3  3  3  4  5  5  5  6  7 20 20 20 20 20\n  0  0  0  0  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  3  3  3  3  3  3  4  4  5 12 10 20 15  8\n  0  0  0  0  0  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  3  3  3  3  4  4  5  7 12 19 20\n  0  0  0  0  0  0  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  3  3  3  4  5  4  3  3\n  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  1\n  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1\n  0  0  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1\n  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1\n  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1\n  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  1  1  1\n  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1\n";
  
  Mandelbrot m4 = new Mandelbrot(new Complex(-1,-1),new Complex(0.5,1),33,25,20);
  int[][] e4 = 
    { {   2,   2,   2,   2,   2,   2,   3,   3,   3,   3,   4,   4,   5,   7,  12,  19,  20,   3,   3,   3,   3,   2,   2,   2,   1,},
      {   2,   2,   2,   2,   3,   3,   3,   3,   3,   3,   4,   4,   6,   7,  12,   9,   6,   4,   3,   3,   3,   3,   2,   2,   2,},
      {   2,   2,   2,   3,   3,   3,   3,   3,   3,   4,   4,   5,  12,  10,  20,  15,   8,   5,   4,   4,   3,   3,   3,   2,   2,},
      {   2,   2,   3,   3,   3,   3,   3,   4,   4,   5,   5,   7,  16,  20,  20,  20,  20,   6,   4,   4,   4,   3,   3,   2,   2,},
      {   2,   3,   3,   3,   3,   3,   4,   5,   5,   5,   6,   7,  20,  20,  20,  20,  20,   7,   6,   5,   4,   4,   3,   3,   2,},
      {   3,   3,   3,   3,   4,   4,  11,   8,   9,   7,   9,   9,  13,  20,  20,  20,  12,   9,  10,   6,   5,   6,   8,   3,   3,},
      {   3,   3,   4,   4,   4,   5,   8,  20,  19,  11,  20,  20,  20,  20,  20,  20,  20,  20,  20,   9,  16,   9,  10,   4,   3,},
      {   4,   4,   4,   4,   5,   6,   8,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  12,   5,   4,},
      {   4,   4,   4,   5,   5,   8,  11,  17,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,   8,   5,   4,},
      {   5,   5,   5,   6,   7,  15,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,   8,   6,   4,},
      {   7,   6,   6,   7,   7,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  16,  20,   4,},
      {  19,  14,   8,   8,   9,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  10,   5,},
      {  20,  20,  20,  10,  12,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  12,   4,},
      {  20,  20,  20,  20,  16,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,   7,   4,},
      {  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  16,   5,   4,},
      {  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,   7,   5,   4,},
      {  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  10,   6,   5,   4,},
      {  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,   7,   5,   4,},
      {  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  16,   5,   4,},
      {  20,  20,  20,  20,  16,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,   7,   4,},
      {  20,  20,  20,  10,  12,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  12,   4,},
      {  19,  14,   8,   8,   9,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  10,   5,},
      {   7,   6,   6,   7,   7,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  16,  20,   4,},
      {   5,   5,   5,   6,   7,  15,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,   8,   6,   4,},
      {   4,   4,   4,   5,   5,   8,  11,  17,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,   8,   5,   4,},
      {   4,   4,   4,   4,   5,   6,   8,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  12,   5,   4,},
      {   3,   3,   4,   4,   4,   5,   8,  20,  19,  11,  20,  20,  20,  20,  20,  20,  20,  20,  20,   9,  16,   9,  10,   4,   3,},
      {   3,   3,   3,   3,   4,   4,  11,   8,   9,   7,   9,   9,  13,  20,  20,  20,  12,   9,  10,   6,   5,   6,   8,   3,   3,},
      {   2,   3,   3,   3,   3,   3,   4,   5,   5,   5,   6,   7,  20,  20,  20,  20,  20,   7,   6,   5,   4,   4,   3,   3,   2,},
      {   2,   2,   3,   3,   3,   3,   3,   4,   4,   5,   5,   7,  16,  20,  20,  20,  20,   6,   4,   4,   4,   3,   3,   2,   2,},
      {   2,   2,   2,   3,   3,   3,   3,   3,   3,   4,   4,   5,  12,  10,  20,  15,   8,   5,   4,   4,   3,   3,   3,   2,   2,},
      {   2,   2,   2,   2,   3,   3,   3,   3,   3,   3,   4,   4,   6,   7,  12,   9,   6,   4,   3,   3,   3,   3,   2,   2,   2,},
      {   2,   2,   2,   2,   2,   2,   3,   3,   3,   3,   4,   4,   5,   7,  12,  19,  20,   3,   3,   3,   3,   2,   2,   2,   1}};
  String s4 = "33 25 20\n-1.0 0.5 -1.0 1.0\n0.0 0.0\n\n\n  2  2  2  2  2  2  3  3  3  3  4  4  5  7 12 19 20  3  3  3  3  2  2  2  1\n  2  2  2  2  3  3  3  3  3  3  4  4  6  7 12  9  6  4  3  3  3  3  2  2  2\n  2  2  2  3  3  3  3  3  3  4  4  5 12 10 20 15  8  5  4  4  3  3  3  2  2\n  2  2  3  3  3  3  3  4  4  5  5  7 16 20 20 20 20  6  4  4  4  3  3  2  2\n  2  3  3  3  3  3  4  5  5  5  6  7 20 20 20 20 20  7  6  5  4  4  3  3  2\n  3  3  3  3  4  4 11  8  9  7  9  9 13 20 20 20 12  9 10  6  5  6  8  3  3\n  3  3  4  4  4  5  8 20 19 11 20 20 20 20 20 20 20 20 20  9 16  9 10  4  3\n  4  4  4  4  5  6  8 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 12  5  4\n  4  4  4  5  5  8 11 17 20 20 20 20 20 20 20 20 20 20 20 20 20 20  8  5  4\n  5  5  5  6  7 15 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  8  6  4\n  7  6  6  7  7 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 16 20  4\n 19 14  8  8  9 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 10  5\n 20 20 20 10 12 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 12  4\n 20 20 20 20 16 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  7  4\n 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 16  5  4\n 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  7  5  4\n 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 10  6  5  4\n 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  7  5  4\n 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 16  5  4\n 20 20 20 20 16 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  7  4\n 20 20 20 10 12 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 12  4\n 19 14  8  8  9 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 10  5\n  7  6  6  7  7 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 16 20  4\n  5  5  5  6  7 15 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  8  6  4\n  4  4  4  5  5  8 11 17 20 20 20 20 20 20 20 20 20 20 20 20 20 20  8  5  4\n  4  4  4  4  5  6  8 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 12  5  4\n  3  3  4  4  4  5  8 20 19 11 20 20 20 20 20 20 20 20 20  9 16  9 10  4  3\n  3  3  3  3  4  4 11  8  9  7  9  9 13 20 20 20 12  9 10  6  5  6  8  3  3\n  2  3  3  3  3  3  4  5  5  5  6  7 20 20 20 20 20  7  6  5  4  4  3  3  2\n  2  2  3  3  3  3  3  4  4  5  5  7 16 20 20 20 20  6  4  4  4  3  3  2  2\n  2  2  2  3  3  3  3  3  3  4  4  5 12 10 20 15  8  5  4  4  3  3  3  2  2\n  2  2  2  2  3  3  3  3  3  3  4  4  6  7 12  9  6  4  3  3  3  3  2  2  2\n  2  2  2  2  2  2  3  3  3  3  4  4  5  7 12 19 20  3  3  3  3  2  2  2  1\n";

  Mandelbrot m5 = new Mandelbrot(new Complex(-.9,0),new Complex(-.7,0.2),65,65,99);
  int [][] e5 =
    { {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  96,  27,  24,  50,  47,  32,  23,  20,  16,  15,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  16,  18,  19,  22,  25,  28,  99,  44,  60,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  33,  27,  26,  29,  63,  36,  21,  18,  16,  15,  15,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  16,  16,  17,  19,  24,  53,  29,  32,  56,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  64,  44,  89,  31,  28,  29,  31,  58,  43,  19,  16,  16,  15,  15,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  16,  17,  17,  24,  69,  34,  32,  51,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  85,  33,  31,  74,  50,  49,  45,  18,  16,  16,  15,  15,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  16,  17,  18,  23,  81,  38,  75,  99,  55,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  68,  52,  72,  40,  48,  49,  33,  18,  17,  17,  16,  15,  15,  15,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  16,  16,  18,  20,  40,  99,  50,  83,  99,  70,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  95,  45,  20,  20,  21,  40,  16,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  17,  70,  34,  99,  85,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  54,  27,  25,  37,  35,  39,  17,  16,  16,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  18,  20,  41,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  38,  29,  48,  94,  27,  22,  18,  17,  16,  16,  16,  16,  16,  15,  16,  16,  16,  16,  16,  17,  18,  19,  22,  25,  30,  34,  99,  66,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  48,  49,  31,  33,  36,  61,  20,  18,  17,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  18,  19,  20,  25,  53,  34,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  65,  99,  36,  34,  37,  77,  73,  19,  18,  17,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  18,  19,  23,  60,  38,  37,  93,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  51,  88,  51,  99,  39,  20,  19,  18,  17,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  18,  20,  24,  99,  71,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  75,  99,  99,  99,  51,  23,  41,  24,  18,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  19,  43,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  52,  30,  45,  35,  39,  19,  18,  17,  17,  17,  17,  17,  17,  17,  18,  18,  20,  44,  86,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  41,  34,  83,  86,  22,  19,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  20,  22,  25,  31,  37,  53,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  38,  39,  58,  23,  20,  19,  18,  18,  18,  18,  18,  18,  18,  19,  19,  20,  21,  25,  44,  39,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  77,  79,  53,  99,  32,  21,  20,  19,  18,  18,  18,  18,  18,  19,  19,  19,  20,  22,  36,  97,  99,  65,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  33,  71,  25,  20,  19,  19,  19,  19,  19,  19,  19,  19,  21,  99,  99,  80,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  43,  38,  61,  69,  21,  20,  19,  19,  19,  19,  19,  20,  20,  22,  99,  99,  98,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  44,  41,  45,  24,  22,  20,  20,  20,  20,  20,  20,  20,  21,  22,  24,  29,  40,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  61,  98,  70,  57,  22,  21,  20,  20,  20,  20,  20,  21,  21,  22,  24,  71,  47,  61,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  53,  35,  25,  21,  21,  20,  21,  21,  21,  21,  23,  26,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  70,  43,  61,  27,  22,  22,  21,  21,  21,  21,  22,  24,  67,  99,  90,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  46,  99,  25,  23,  22,  22,  22,  22,  22,  23,  24,  26,  57,  47,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  27,  24,  23,  22,  22,  22,  23,  23,  24,  27,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  79,  62,  51,  24,  23,  23,  23,  23,  23,  25,  45,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  50,  52,  28,  25,  24,  24,  24,  24,  24,  26,  30,  46,  76,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  83,  35,  26,  24,  24,  24,  24,  25,  26,  55,  59,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  71,  99,  26,  25,  25,  25,  25,  28,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  57,  31,  27,  26,  26,  26,  26,  28,  33,  54,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  36,  30,  27,  26,  27,  27,  28,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  60,  30,  28,  27,  27,  28,  30,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  33,  29,  28,  28,  29,  30,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  69,  31,  29,  29,  29,  32,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  33,  30,  30,  31,  32,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  64,  36,  32,  31,  31,  34,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  42,  33,  32,  33,  34,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  35,  34,  34,  36,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  70,  38,  35,  35,  38,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  36,  37,  38,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  82,  38,  38,  40,  81,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  40,  40,  42,  84,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  90,  43,  41,  44,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  46,  43,  46,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  54,  46,  48,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  48,  50,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  51,  53,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  54,  56,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  58,  59,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  63,  62,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  67,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  72,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  78,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  84,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  92,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,},
      {  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99}};
  String s5 = "65 65 99\n-0.9 -0.7 0.0 0.2\n0.0 0.0\n\n\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 96 27 24 50 47 32 23 20 16 15 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 16 18 19 22 25 28 99 44 60 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 33 27 26 29 63 36 21 18 16 15 15 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 16 16 17 19 24 53 29 32 56 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 64 44 89 31 28 29 31 58 43 19 16 16 15 15 14 14 14 14 14 14 14 14 14 14 15 15 15 15 16 17 17 24 69 34 32 51 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 85 33 31 74 50 49 45 18 16 16 15 15 14 14 14 14 14 14 14 14 15 15 15 15 15 16 17 18 23 81 38 75 99 55 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 68 52 72 40 48 49 33 18 17 17 16 15 15 15 14 14 14 14 15 15 15 15 15 15 16 16 18 20 40 99 50 83 99 70 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 95 45 20 20 21 40 16 15 15 15 15 15 15 15 15 15 15 15 15 16 17 70 34 99 85 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 54 27 25 37 35 39 17 16 16 15 15 15 15 15 15 15 15 16 16 16 18 20 41 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 38 29 48 94 27 22 18 17 16 16 16 16 16 15 16 16 16 16 16 17 18 19 22 25 30 34 99 66 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 48 49 31 33 36 61 20 18 17 16 16 16 16 16 16 16 16 16 16 17 17 18 19 20 25 53 34 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 65 99 36 34 37 77 73 19 18 17 16 16 16 16 16 16 16 16 17 17 17 18 19 23 60 38 37 93 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 51 88 51 99 39 20 19 18 17 16 16 16 16 16 16 17 17 17 17 18 20 24 99 71 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 75 99 99 99 51 23 41 24 18 17 17 17 17 17 17 17 17 17 18 19 43 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 52 30 45 35 39 19 18 17 17 17 17 17 17 17 18 18 20 44 86 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 41 34 83 86 22 19 18 18 18 18 18 18 18 18 18 19 20 22 25 31 37 53 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 38 39 58 23 20 19 18 18 18 18 18 18 18 19 19 20 21 25 44 39 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 77 79 53 99 32 21 20 19 18 18 18 18 18 19 19 19 20 22 36 97 99 65 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 33 71 25 20 19 19 19 19 19 19 19 19 21 99 99 80 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 43 38 61 69 21 20 19 19 19 19 19 20 20 22 99 99 98 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 44 41 45 24 22 20 20 20 20 20 20 20 21 22 24 29 40 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 61 98 70 57 22 21 20 20 20 20 20 21 21 22 24 71 47 61 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 53 35 25 21 21 20 21 21 21 21 23 26 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 70 43 61 27 22 22 21 21 21 21 22 24 67 99 90 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 46 99 25 23 22 22 22 22 22 23 24 26 57 47 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 27 24 23 22 22 22 23 23 24 27 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 79 62 51 24 23 23 23 23 23 25 45 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 50 52 28 25 24 24 24 24 24 26 30 46 76 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 83 35 26 24 24 24 24 25 26 55 59 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 71 99 26 25 25 25 25 28 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 57 31 27 26 26 26 26 28 33 54 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 36 30 27 26 27 27 28 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 60 30 28 27 27 28 30 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 33 29 28 28 29 30 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 69 31 29 29 29 32 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 33 30 30 31 32 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 64 36 32 31 31 34 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 42 33 32 33 34 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 35 34 34 36 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 70 38 35 35 38 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 36 37 38 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 82 38 38 40 81 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 40 40 42 84 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 90 43 41 44 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 46 43 46 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 54 46 48 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 48 50 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 51 53 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 54 56 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 58 59 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 63 62 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 67 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 72 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 78 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 84 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 92 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99\n";
  
  @Test public void fractal_escapes1_p1() { assertTrue(Arrays.deepEquals(e1,m1.escapes()));}
  @Test public void fractal_escapes1_p2() { assertTrue(Arrays.deepEquals(e1,m1.escapes()));}
  @Test public void fractal_escapes1_p3() { assertTrue(Arrays.deepEquals(e1,m1.escapes()));}
  
  @Test public void fractal_escapes2_p1() { assertTrue(Arrays.deepEquals(e2,m2.escapes()));}
  @Test public void fractal_escapes2_p2() { assertTrue(Arrays.deepEquals(e2,m2.escapes()));}
  @Test public void fractal_escapes2_p3() { assertTrue(Arrays.deepEquals(e2,m2.escapes()));}
  
  @Test public void fractal_escapes3_p1() { assertTrue(Arrays.deepEquals(e3,m3.escapes()));}
  @Test public void fractal_escapes3_p2() { assertTrue(Arrays.deepEquals(e3,m3.escapes()));}
  @Test public void fractal_escapes3_p3() { assertTrue(Arrays.deepEquals(e3,m3.escapes()));}
  
  @Test public void fractal_escapes4_p1() { assertTrue(Arrays.deepEquals(e4,m4.escapes()));}
  @Test public void fractal_escapes4_p2() { assertTrue(Arrays.deepEquals(e4,m4.escapes()));}
  @Test public void fractal_escapes4_p3() { assertTrue(Arrays.deepEquals(e4,m4.escapes()));}
  
  @Test public void fractal_escapes5_p1() { assertTrue(Arrays.deepEquals(e5,m5.escapes()));}
  @Test public void fractal_escapes5_p2() { assertTrue(Arrays.deepEquals(e5,m5.escapes()));}
  @Test public void fractal_escapes5_p3() { assertTrue(Arrays.deepEquals(e5,m5.escapes()));}
  
  public void checkString(Fractal frac, String expected, String filename){
    checkString(frac, expected, filename, -1);
  }
  
  public void checkString(Fractal frac, String expected, String filename, int maxnums){
    
    try {
      frac.write("out.txt");
      Scanner s1 = new Scanner (expected);
      Scanner s2 = new Scanner (readFile("out.txt"));
      int count = 0;
      while (s1.hasNextDouble() && count<maxnums){
       assertEquals(s1.nextDouble(),s2.nextDouble(),EXACT);
       count++;
      }
    }
    catch (Exception e) {
     throw  new AssertionError("file not written!"); 
    }
    
  }
  
  @Test public void fractal_write_1_p1() { checkString(m1, s1, "out.txt",9);}
  @Test public void fractal_write_1_p2() { checkString(m1, s1, "out.txt");}
  @Test public void fractal_write_2_p1() { checkString(m2, s2, "out.txt",9);}
  @Test public void fractal_write_2_p2() { checkString(m2, s2, "out.txt");}
  @Test public void fractal_write_3_p1() { checkString(m3, s3, "out.txt",9);}
  @Test public void fractal_write_3_p2() { checkString(m3, s3, "out.txt");}
  @Test public void fractal_write_4_p1() { checkString(m4, s4, "out.txt",9);}
  @Test public void fractal_write_4_p2() { checkString(m4, s4, "out.txt");}
  @Test public void fractal_write_5_p1() { checkString(m5, s5, "out.txt",9);}
  @Test public void fractal_write_5_p2() { checkString(m5, s5, "out.txt");}
  
  @Test public void fractal_zoom_1() {
    Mandelbrot m = new Mandelbrot(new Complex(-2,-2),new Complex(2,2),20,30,40);
    m.zoom(2);
    assertEquals(-1, m.low.r, EXACT);
    assertEquals( 1, m.high.r,EXACT);
  }
  @Test public void fractal_zoom_2() {
    Mandelbrot m = new Mandelbrot(new Complex(-2,-2),new Complex(2,2),20,30,40);
    m.zoom(2);
    assertEquals(-1, m.low.i,  EXACT);
    assertEquals( 1, m.high.i, EXACT);
  }
  @Test public void fractal_zoom_3() {
    Mandelbrot m = new Mandelbrot(new Complex(-2,-2),new Complex(2,2),20,30,40);
    m.zoom(0.5);
    assertEquals(-4, m.low.r, EXACT);
    assertEquals( 4, m.high.r,EXACT);
  }
  @Test public void fractal_zoom_4() {
    Mandelbrot m = new Mandelbrot(new Complex(-2,-2),new Complex(2,2),20,30,40);
    m.zoom(0.5);
    assertEquals(-4, m.low.i, EXACT);
    assertEquals( 4, m.high.i,EXACT);
  }


  @Test public void fractal_zoom_5() {
    Mandelbrot m = new Mandelbrot(new Complex(5,10),new Complex(35,40),20,30,40);
    m.zoom(3);
    assertEquals(15, m.low.r,  EXACT);
    assertEquals(25, m.high.r, EXACT);
  }
  @Test public void fractal_zoom_6() {
    Mandelbrot m = new Mandelbrot(new Complex(5,10),new Complex(35,40),20,30,40);
    m.zoom(3);

    assertEquals(20, m.low.i,  EXACT);
    assertEquals(30, m.high.i, EXACT);
  }

  @Test public void fractal_zoom_7() {
    Mandelbrot m = new Mandelbrot(new Complex(-5,-5),new Complex(5,5),20,30,40);
    m.zoom(10);
    assertEquals(-0.5, m.low.r, EXACT);
    assertEquals( 0.5, m.high.r,EXACT);
  }
  @Test public void fractal_zoom_8() {
    Mandelbrot m = new Mandelbrot(new Complex(-5,-5),new Complex(5,5),20,30,40);
    m.zoom(10);

    assertEquals(-0.5, m.low.i, EXACT);
    assertEquals( 0.5, m.high.i,EXACT);
  }

  @Test public void fractal_zoom_9() {
    Mandelbrot m = new Mandelbrot(new Complex(-10,-50),new Complex(50,70),20,30,40);
    m.zoom(0.25);
    assertEquals(-100, m.low.r,  EXACT);
    assertEquals( 140, m.high.r, EXACT);
  }
  @Test public void fractal_zoom_10() {
    Mandelbrot m = new Mandelbrot(new Complex(-10,-50),new Complex(50,70),20,30,40);
    m.zoom(0.25);
    assertEquals(-230, m.low.i ,EXACT);
    assertEquals( 250, m.high.i,EXACT);
  }
  
  @Test public void fractal_updateDimensions_1(){
    Mandelbrot m = new Mandelbrot(new Complex(-2,-2),new Complex(2,2), 10, 10, 30);
    m.updateDimensions(new Complex(1,2),new Complex(3,4));
    assertEquals(m.low.r,1,EXACT);
  }
  @Test public void fractal_updateDimensions_2(){
    Mandelbrot m = new Mandelbrot(new Complex(-2,-2),new Complex(2,2), 10, 10, 30);
    m.updateDimensions(new Complex(1,2),new Complex(3,4));
    assertEquals(m.low.i,2,EXACT);
  }
  @Test public void fractal_updateDimensions_3(){
    Mandelbrot m = new Mandelbrot(new Complex(-2,-2),new Complex(2,2), 10, 10, 30);
    m.updateDimensions(new Complex(1,2),new Complex(3,4));
    assertEquals(m.high.r,3,EXACT);
  }
  @Test public void fractal_updateDimensions_4(){
    Mandelbrot m = new Mandelbrot(new Complex(-2,-2),new Complex(2,2), 10, 10, 30);
    m.updateDimensions(new Complex(1,2),new Complex(3,4));
    assertEquals(m.high.i,4,EXACT);
  }
  @Test public void fractal_updateDimensions_5(){
    Mandelbrot m = new Mandelbrot(new Complex(0,0),new Complex(2,2), 10, 10, 30);
    m.updateDimensions(new Complex(5,6),new Complex(7,8));
    assertEquals(m.low.r,5,EXACT);
    assertEquals(m.low.i,6,EXACT);
    assertEquals(m.high.r,7,EXACT);
    assertEquals(m.high.i,8,EXACT);
  }
  
  @Test public void mandelbrot_constr_1(){ assertEquals(1, new Mandelbrot(new Complex(1,2),new Complex(3,4), 5, 6, 7).low.r,EXACT);}
  @Test public void mandelbrot_constr_2(){ assertEquals(2, new Mandelbrot(new Complex(1,2),new Complex(3,4), 5, 6, 7).low.i,EXACT);}
  @Test public void mandelbrot_constr_3(){ assertEquals(3, new Mandelbrot(new Complex(1,2),new Complex(3,4), 5, 6, 7).high.r,EXACT);}
  @Test public void mandelbrot_constr_4(){ assertEquals(4, new Mandelbrot(new Complex(1,2),new Complex(3,4), 5, 6, 7).high.i,EXACT);}
  @Test public void mandelbrot_constr_5(){ assertEquals(5, new Mandelbrot(new Complex(1,2),new Complex(3,4), 5, 6, 7).nrows,EXACT);}
  @Test public void mandelbrot_constr_6(){ assertEquals(6, new Mandelbrot(new Complex(1,2),new Complex(3,4), 5, 6, 7).ncols,EXACT);}
  @Test public void mandelbrot_constr_7(){ assertEquals(7, new Mandelbrot(new Complex(1,2),new Complex(3,4), 5, 6, 7).maxIters,EXACT);}
  @Test public void mandelbrot_constr_8(){ assertTrue(null != new Mandelbrot(new Complex(1,2),new Complex(3,4), 5, 6, 7).escapeVals);}
  @Test public void mandelbrot_constr_9(){
    Mandelbrot m = new Mandelbrot(new Complex(1,2),new Complex(3,4), 5, 6, 7);
    assertEquals(0,m.c.r,EXACT);
    assertEquals(0,m.c.i,EXACT);
  }
  @Test public void mandelbrot_constr_10(){ assertTrue(Arrays.deepEquals(new int[][]{ { 0, 0, 1, 0, 0 }, { 0, 2, 10, 1, 0 }, { 10, 10, 10, 2, 1 }, { 0, 2, 10, 1, 0 }, { 0, 0, 1, 0, 0 } },
                                                                         new Mandelbrot(new Complex(-2,-2),new Complex(2,2), 5,5,10).escapeVals));
  }
  
  @Test public void mandelbrot_escapeCount_1 (){assertEquals(20,m1.escapeCount(new Complex(0,0)));}
  @Test public void mandelbrot_escapeCount_2 (){assertEquals(99,m5.escapeCount(new Complex(0,0)));}
  @Test public void mandelbrot_escapeCount_3 (){assertEquals(150,new Mandelbrot(new Complex(-1,-1),new Complex(1,1),50,50,150).escapeCount(new Complex(0,0)));}
  @Test public void mandelbrot_escapeCount_4 (){assertEquals(150,new Mandelbrot(new Complex(-1,-1),new Complex(1,1),50,50,150).escapeCount(new Complex(-2,0)));}
  @Test public void mandelbrot_escapeCount_5 (){assertEquals(106,new Mandelbrot(new Complex(-1,-1),new Complex(1,1),50,50,1000).escapeCount(new Complex(-0.7496,0.0723)));}
  @Test public void mandelbrot_escapeCount_6 (){assertEquals(231,new Mandelbrot(new Complex(-1,-1),new Complex(1,1),50,50,1000).escapeCount(new Complex(-0.7496,0.0724)));}
  @Test public void mandelbrot_escapeCount_7 (){assertEquals(180,new Mandelbrot(new Complex(-1,-1),new Complex(1,1),50,50,1000).escapeCount(new Complex(-0.74965,0.0724)));}
  @Test public void mandelbrot_escapeCount_8 (){assertEquals(181,new Mandelbrot(new Complex(-1,-1),new Complex(1,1),50,50,1000).escapeCount(new Complex(-0.749653,0.07243)));}
  @Test public void mandelbrot_escapeCount_9 (){assertEquals(235,new Mandelbrot(new Complex(-1,-1),new Complex(1,1),50,50,1000).escapeCount(new Complex(-0.749652,0.07242)));}
  @Test public void mandelbrot_escapeCount_10(){assertEquals(329,new Mandelbrot(new Complex(-1,-1),new Complex(1,1),50,50,1000).escapeCount(new Complex(-0.749,0.072)));}
  
  @Test public void mandelbrot_main_1(){
    Mandelbrot.main(new String[]{"-2","2","-2","2","17","17","40","main1.txt"});
    Mandelbrot m = new Mandelbrot(new Complex(-2,-2),new Complex(2,2),17,17,40);
    checkString(m,readFile("main1.txt"),"main2.txt");
  }

  @Test public void mandelbrot_main_2(){
    Mandelbrot.main(new String[]{"0","2","0","2","17","17","99","main1.txt"});
    Mandelbrot m = new Mandelbrot(new Complex(0,0),new Complex(2,2),17,17,99);
    checkString(m,readFile("main1.txt"),"main2.txt");
  }

  @Test public void mandelbrot_main_3(){
    Mandelbrot.main(new String[]{"-5","5","-5","5","65","65","133","main1.txt"});
    Mandelbrot m = new Mandelbrot(new Complex(-5,-5),new Complex(5,5),65,65,133);
    checkString(m,readFile("main1.txt"),"main2.txt");
  }

  @Test public void mandelbrot_main_4(){
    Mandelbrot.main(new String[]{"1","5","2","10","33","33","56","main1.txt"});
    Mandelbrot m = new Mandelbrot(new Complex(1,2),new Complex(5,10),33,33,56);
    checkString(m,readFile("main1.txt"),"main2.txt");
  }

  @Test public void mandelbrot_main_5(){
    Mandelbrot.main(new String[]{"10","20","30","40","5","5","10000","main1.txt"});
    Mandelbrot m = new Mandelbrot(new Complex(10,30),new Complex(20,40),5,5,10000);
    checkString(m,readFile("main1.txt"),"main2.txt");
  }
  
  @Test public void julia_constr_1(){
    assertEquals(1, new Julia(new Complex(1,2),new Complex(3,4), 5, 6, 7,new Complex(8,9)).low.r,EXACT);
    assertEquals(2, new Julia(new Complex(1,2),new Complex(3,4), 5, 6, 7,new Complex(8,9)).low.i,EXACT);
  }
  @Test public void julia_constr_2(){
    assertEquals(3, new Julia(new Complex(1,2),new Complex(3,4), 5, 6, 7,new Complex(8,9)).high.r,EXACT);
    assertEquals(4, new Julia(new Complex(1,2),new Complex(3,4), 5, 6, 7,new Complex(8,9)).high.i,EXACT);
  }
  @Test public void julia_constr_3(){
    assertEquals(5, new Julia(new Complex(1,2),new Complex(3,4), 5, 6, 7,new Complex(8,9)).nrows,EXACT);
    assertEquals(6, new Julia(new Complex(1,2),new Complex(3,4), 5, 6, 7,new Complex(8,9)).ncols,EXACT);
    assertEquals(7, new Julia(new Complex(1,2),new Complex(3,4), 5, 6, 7,new Complex(8,9)).maxIters,EXACT);
  }
  @Test public void julia_constr_4(){
    Julia m = new Julia(new Complex(1,2),new Complex(3,4), 5, 6, 7,new Complex(8,9));
    assertEquals(8,m.c.r,EXACT);
    assertEquals(9,m.c.i,EXACT);
  }
  @Test public void julia_constr_5(){ assertTrue(Arrays.deepEquals(new int[][]{ { 0, 0, 0, 0, 0 }, { 0, 1, 1, 0, 0 }, { 0, 4, 99, 4, 0 }, { 0, 0, 1, 1, 0 }, { 0, 0, 0, 0, 0 } },
                                                                   new Julia(new Complex(-2,-2),new Complex(2,2), 5,5,99,new Complex(-.62772, .42193)).escapeVals));
  }
  
  @Test public void julia_escapeCount_1 (){assertEquals(1000, new Julia(new Complex(-1,-1),new Complex(1,1),50,50,1000, new Complex(-.62772, .42193)).escapeCount(new Complex(0,0)));}
  @Test public void julia_escapeCount_2 (){assertEquals(  50, new Julia(new Complex(-1,-1),new Complex(1,1),50,50,  50, new Complex(-.62772, .42193)).escapeCount(new Complex(0,0)));}
  @Test public void julia_escapeCount_3 (){assertEquals(   0, new Julia(new Complex(-1,-1),new Complex(1,1),50,50, 100, new Complex(-.62772, .42193)).escapeCount(new Complex(2,0)));}
  @Test public void julia_escapeCount_4 (){assertEquals( 248, new Julia(new Complex(-2,-2),new Complex(2,2),20,20,1000, new Complex(-.62772, .42193)).escapeCount(new Complex(-.35405,0.18105))); }
  @Test public void julia_escapeCount_5 (){assertEquals( 258, new Julia(new Complex(-2,-2),new Complex(2,2),20,20,1000, new Complex(-.62772, .42193)).escapeCount(new Complex(-.35406,0.18106))); }
  @Test public void julia_escapeCount_6 (){assertEquals(1000, new Julia(new Complex(-2,-2),new Complex(2,2),20,20,1000, new Complex(-.62772, .42193)).escapeCount(new Complex(-.3541, 0.18106))); }
  @Test public void julia_escapeCount_7 (){assertEquals(  81, new Julia(new Complex(-2,-2),new Complex(2,2),20,20,1000, new Complex(-.62772, .42193)).escapeCount(new Complex(0.44, -0.15))); }
  @Test public void julia_escapeCount_8 (){assertEquals(  84, new Julia(new Complex(-2,-2),new Complex(2,2),20,20,1000, new Complex(-.62772, .42193)).escapeCount(new Complex(0.445, -0.155))); }
  @Test public void julia_escapeCount_9 (){assertEquals(  74, new Julia(new Complex(-2,-2),new Complex(2,2),20,20,500, new Complex(-.7,0.4)).escapeCount(new Complex(.49,-0.2))); }
  @Test public void julia_escapeCount_10(){assertEquals(  27, new Julia(new Complex(-2,-2),new Complex(2,2),20,20,500, new Complex(-.7,0.4)).escapeCount(new Complex(.49,-0.3))); }

  @Test public void julia_main_1(){
    Julia.main(new String[]{"-2","2","-2","2","17","17","40","-0.62772","0.42193","main1.txt"});
    Julia j = new Julia(new Complex(-2,-2),new Complex(2,2),17,17,40,new Complex(-0.62772,0.42193));
    checkString(j,readFile("main1.txt"),"main2.txt");
  }
  @Test public void julia_main_2(){
    Julia.main(new String[]{"-1","1","-1","1","33","33","55","0.49","-0.2","main1.txt"});
    Julia j = new Julia(new Complex(-1,-1),new Complex(1,1),33,33,55,new Complex(0.49,-0.2));
    checkString(j,readFile("main1.txt"),"main2.txt");
  }
  @Test public void julia_main_3(){
    Julia.main(new String[]{"-1","1","-1","1","33","33","550","0.49","-0.2","main1.txt"});
    Julia j = new Julia(new Complex(-1,-1),new Complex(1,1),33,33,550,new Complex(0.49,-0.2));
    checkString(j,readFile("main1.txt"),"main2.txt");
  }
  @Test public void julia_main_4(){
    Julia.main(new String[]{"-1","1","-1","1","129","129","500","0.49","-0.3","main1.txt"});
    Julia j = new Julia(new Complex(-1,-1),new Complex(1,1),129,129,500,new Complex(0.49,-0.3));
    checkString(j,readFile("main1.txt"),"main2.txt");
  }
  @Test public void julia_main_5(){
    Julia.main(new String[]{"0","0.5","-0.25","0.75","33","33","55","-0.62772","0.42193","main1.txt"});
    Julia j = new Julia(new Complex(-1,-1),new Complex(1,1),33,33,55,new Complex(-0.62772,0.42193));
    checkString(j,readFile("main1.txt"),"main2.txt");
  }
  
}